#include "Assets/Util/Util.hlsl"

struct Agent
{
    float2 pos;
    float angle;
    float speed;
};

RWTexture2D<float4> TrailMap, DiffusedTrailMap;
float width, height, midX, midY, time, deltaTime;

RWStructuredBuffer<Agent> agents;

#pragma kernel Update

[numthreads(32,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    Agent agent = agents[id.x];

    float2 direction = getDir(agent.angle);
    float2 newPos = agent.pos + direction * agent.speed * deltaTime;
    float random = scaleToRange01(hash(time*id.x));
    
    // if(random < 0.0001*agent.speed)
    //     agent.angle += (random-0.5)*agent.angle;

    if(isOutside(newPos.x, newPos.y, width, height))
    {
        agent.angle = random * 2 * 3.1415;
        direction = getDir(agent.angle);
        newPos = agent.pos + direction * agent.speed * deltaTime;
    }
    if(isOutside(newPos.x, newPos.y, width, height))
        newPos = float2(random*width, random*height);
    
    agent.pos = newPos;
    TrailMap[int2(agent.pos.x, agent.pos.y)] = 1;
    // TrailMap[int2(agent.pos.x, agent.pos.y)] = float4(agent.angle%1, (agent.angle*1.5)%1, (agent.angle*2.25)%1, 1);
    // TrailMap[int2(agent.pos.x, agent.pos.y)] = float4((agent.angle*20)%1, newPos.x/width, newPos.y/height, 1);
    // TrailMap[int2(agent.pos.x, agent.pos.y)] = float4(agent.speed/1000, (agent.angle*agent.speed)%0.5, agent.speed/10000, 1);
    
    // float x = id.x / width;
    // float y = id.y / height;
    // Result[id.xy] = float4(sin(x), cos(x), tan(x + y), 1);
    
    agents[id.x] = agent;
}

#pragma kernel Diffuse

[numthreads(8,8,1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
    // const float4 originalCol = TrailMap[id.xy];
    float4 sum = 0;
    // 3x3 blur
    for(int offsetX = -1; offsetX <= 1; ++offsetX)
    {
        for(int offsetY = -1; offsetY <= 1; ++offsetY)
        {
            sum += TrailMap[int2
                (
                    limitWithinRange(id.x + offsetX, 0, width-1),
                    limitWithinRange(id.y + offsetY, 0, height-1)
                )];
        }
    }

    float4 blurredCol = sum / 9;
    blurredCol = float4(blurredCol.x, blurredCol.y, blurredCol.z, 1);
    // float diffuseWeight = saturate(diffuseRate * deltaTime);
    // blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);
    DiffusedTrailMap[id.xy] = max(0, blurredCol - 0.01 * deltaTime);
}

#pragma kernel Color

[numthreads(8,8,1)]
void Color(uint3 id : SV_DispatchThreadID)
{
    // float greyscale = DiffusedTrailMap[id.xy].x;
    // TrailMap[id.xy] = 1;
}